plugins {
    id 'com.github.ben-manes.versions' version '0.17.0'
    id "net.mbonnin.android.strings2xls" version "0.1.4"
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

static def extraFile(filename) {
    "../extra/app/" + filename
}

android {
    compileSdkVersion atConfig.compileSdkVersion
    buildToolsVersion atConfig.buildToolsVersion

    lintOptions {
        disable 'MissingTranslation'
    }

    defaultConfig {
        applicationId "net.mbonnin.arcanetracker"
        minSdkVersion 19
        targetSdkVersion atConfig.targetSdkVersion
        versionCode 232
        versionName "2.32"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        mbonnin {
            keyAlias 'mbonnin'
            keyPassword 'password'
            storeFile file(extraFile('keystore.jks'))
            storePassword 'password'
            // sha1: 46:AF:3F:32:C0:F9:9C:EA:29:4E:F0:73:4D:2F:73:0B:E4:40:BB:7C
        }
    }

    dataBinding {
        enabled = true
    }

    def props = new Properties()
    def f = project.file(extraFile('keystore.properties'))
    if (f.exists()) {
        props.load(new FileInputStream(f))

        signingConfigs.mbonnin.storeFile project.file(props.keyStore)
        signingConfigs.mbonnin.storePassword props.keyStorePassword
        signingConfigs.mbonnin.keyAlias props.keyAlias
        signingConfigs.mbonnin.keyPassword props.keyAliasPassword
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if(f.exists()) {
                signingConfig signingConfigs.mbonnin
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if(f.exists()) {
                signingConfig signingConfigs.mbonnin
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/java'
    }
}

repositories {
    jcenter()
    google()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile dep.support_v4
    compile dep.appcompat_v7
    compile dep.design
    compile dep.recyclerview_v7
    compile dep.cardview_v7

    compile "com.android.support.constraint:constraint-layout:1.0.2"

    compile dep.gson
    compile 'io.paperdb:paperdb:2.6'
    compile dep.okhttp

    compile dep.timber
    compile 'com.annimon:stream:1.1.9'

    compile "io.reactivex.rxjava2:rxjava:2.1.6"
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxkotlin:1.0.0'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.3.0'

    compile dep.play_auth
    compile dep.play_firebase_core
    compile dep.play_firebase_crash
    compile dep.play_firebase_messaging

    compile 'com.android.support:multidex:1.0.2'
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.android.support:multidex:1.0.2'
    compile project(":detector")

    testImplementation dep.junit
    androidTestImplementation "com.android.support.test:runner:1.0.1"
    androidTestImplementation "com.android.support.test:rules:1.0.1"
    androidTestImplementation "com.android.support:multidex:1.0.2"
    kapt "com.android.databinding:compiler:$android_gradle_plugin_version"
}

def googleServicesFile = file('google-services.json')
def googleServicesExtraFile = file(extraFile('google-services.json'))
def googleServicesMockFile = file('google-services.json.mock')

if (!googleServicesFile.exists()){
    if (googleServicesExtraFile.exists()) {
        println 'using extra google-services.json'
        googleServicesFile.bytes = googleServicesExtraFile.bytes
    } else {
        println 'using mock google-services.json'
        googleServicesFile.bytes = googleServicesMockFile.bytes
    }
}

apply plugin: 'com.google.gms.google-services'
