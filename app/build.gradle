import net.arcanetracker.app.ATAppPlugin

plugins {
    id 'com.github.ben-manes.versions' version '0.20.0'
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: ATAppPlugin

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }
}

android {
    compileSdkVersion Versions.compileSdkVersion

    lintOptions {
        disable 'MissingTranslation'
    }

    defaultConfig {
        applicationId "net.mbonnin.arcanetracker"
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode 409
        versionName "4.09"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        mbonnin {
            keyAlias 'mbonnin'
            keyPassword 'password'
            storeFile file('keystore.jks')
            storePassword 'password'
            // sha1: 46:AF:3F:32:C0:F9:9C:EA:29:4E:F0:73:4D:2F:73:0B:E4:40:BB:7C
        }
    }

    dataBinding {
        enabled = true
    }

    def props = new Properties()
    def f = project.file('keystore.properties')
    if (f.exists()) {
        props.load(new FileInputStream(f))

        signingConfigs.mbonnin.storeFile project.file(props.keyStore)
        signingConfigs.mbonnin.storePassword props.keyStorePassword
        signingConfigs.mbonnin.keyAlias props.keyAlias
        signingConfigs.mbonnin.keyPassword props.keyAliasPassword
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if(f.exists()) {
                signingConfig signingConfigs.mbonnin
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if(f.exists()) {
                signingConfig signingConfigs.mbonnin
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/java'
    }
}

repositories {
    jcenter()
    google()
}

androidExtensions {
    experimental = true
}

dependencies {

    implementation Libs.support_v4
    implementation Libs.appcompat_v7
    implementation Libs.design
    implementation Libs.recyclerview_v7
    implementation Libs.cardview_v7

    implementation Libs.constraintLayout

    implementation Libs.gson
    implementation Libs.paperDb
    implementation Libs.okhttp
    implementation Libs.kotlin_stdlib

    implementation Libs.timber

    implementation Libs.rxjava2
    implementation Libs.rxAndroid2
    implementation Libs.retrofit
    implementation Libs.retrofitRx2
    implementation Libs.retrofitCoroutines
    implementation Libs.gson
    implementation Libs.moshi

    implementation Libs.play_auth
    implementation Libs.play_firebase_core
    implementation Libs.play_firebase_messaging

    implementation Libs.multidex
    implementation Libs.picassoDownloader
    implementation Libs.picasso
    implementation Libs.retrofitGson
    implementation Libs.ktx
    implementation Libs.crashlytics
    implementation Libs.room
    implementation Libs.rxRoom
    implementation Libs.javadeckstrings
    implementation Libs.kotlinhslog
    implementation Libs.flexbox
    implementation Libs.archPaging
    implementation Libs.coroutines
    implementation Libs.coroutinesRx2
    implementation Libs.coroutinesAndroid

    kapt Libs.roomProcessor

    implementation project(":detector")
    implementation project(":hsmodel")

    testImplementation Libs.junit
    testImplementation Libs.okhttp

    androidTestImplementation Libs.test_runner
    androidTestImplementation Libs.test_rules
    androidTestImplementation Libs.multidex
    androidTestImplementation Libs.espressoIntents
    androidTestImplementation(Libs.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
