package net.mbonnin.hsmodel

import com.google.gson.JsonParser
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.PropertySpec
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction
import java.io.File
import java.util.*

open class GenerateConstantsTask : DefaultTask() {
    @InputFile
    var inputFile: File = project.file("./src/main/resources/cards_enUS.json")

    @OutputDirectory
    var outputDir: File = project.file("./build/generated/source/")

    @TaskAction
    fun run() {
        val text = inputFile.reader().readText()
        val cards = JsonParser().parse(text).asJsonArray

        val playerClassSet = TreeSet<String>()
        val raceSet = TreeSet<String>()
        val raritySet = TreeSet<String>()
        val setSet = TreeSet<String>()
        val typeSet = TreeSet<String>()

        val map = TreeMap<String, ArrayList<String>>()
        for (jsonObject in cards) {
            val card = jsonObject.asJsonObject
            try {
                val cardName = card["name"].asString
                        .toUpperCase()
                        .replace(" ", "_")
                        .replace(Regex("[^A-Z_]"), "")

                val allIds = map.getOrPut(cardName, { ArrayList() })
                allIds.add(card["id"].asString)
            } catch (e: Exception) {
            }

            card.get("playerClass")?.asString?.let { playerClassSet.add(it) }
            card.get("race")?.asString?.let { raceSet.add(it) }
            card.get("rarity")?.asString?.let { raritySet.add(it) }
            card.get("set")?.asString?.let { setSet.add(it) }
            card.get("type")?.asString?.let { typeSet.add(it) }
        }

        val cardIds = ArrayList<Pair<String, String>>()
        val keys = TreeSet<String>(map.keys)
        for (key in keys) {
            val allIds = map[key]!!
            allIds.sort()

            for ((i, id) in allIds.withIndex()) {
                var name = key
                if (i > 0) {
                    name += i
                }
                cardIds.add(name to id)
            }
        }

        generateFile("CardId", cardIds, outputDir)

        generateEnumFile("PlayerClass", playerClassSet, outputDir)
        generateEnumFile("Race", raceSet, outputDir)
        generateEnumFile("Rarity", raritySet, outputDir)
        generateEnumFile("Set", setSet, outputDir)
        generateEnumFile("Type", typeSet, outputDir)
    }

}

private fun generateEnumFile(fileName: String, propertySet: Set<String>, outputDir: File) {
    generateFile(fileName, propertySet.map { it to it }, outputDir)
}

private fun generateFile(fileName: String, propertyList: List<Pair<String, String>>, outputDir: File) {
    val fileBuilder = FileSpec.builder("net.mbonnin.hsmodel." + fileName.toLowerCase(), fileName)
    fileBuilder.addComment("Generated by hsmodel")

    for (cardId in propertyList) {
        fileBuilder.addProperty(PropertySpec.builder(cardId.first, String::class)
                .initializer("\"" + cardId.second + "\"")
                .addModifiers(KModifier.CONST, KModifier.PUBLIC)
                .mutable(false)
                .build())
    }

    fileBuilder.build().writeTo(outputDir)
}
