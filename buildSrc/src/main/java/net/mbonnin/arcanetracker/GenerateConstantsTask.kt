package net.mbonnin.hsmodel

import com.google.gson.JsonParser
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction
import java.io.File
import java.util.*

open class GenerateConstantsTask : DefaultTask() {
    @InputFile
    lateinit var inputFile: File

    @OutputDirectory
    lateinit var outputDir: File

    @TaskAction
    fun run() {
        val text = inputFile.reader().readText()
        val cards = JsonParser().parse(text).asJsonArray

        outputDir.deleteRecursively()

        val playerClassSet = TreeSet<String>()
        val raceSet = TreeSet<String>()
        val raritySet = TreeSet<String>()
        val setSet = TreeSet<String>()
        val typeSet = TreeSet<String>()

        val map = TreeMap<String, ArrayList<String>>()
        for (jsonObject in cards) {
            val card = jsonObject.asJsonObject
            try {
                val cardName = card["name"].asString
                        .toUpperCase()
                        .replace(" ", "_")
                        .replace(Regex("[^A-Z_]"), "")

                map.getOrPut(cardName, { ArrayList() }).add(card["id"].asString)
            } catch (e: Exception) {
                //System.out.print(e)
            }

            card.get("playerClass")?.asString?.let { playerClassSet.add(it) }
            card.get("race")?.asString?.let { raceSet.add(it) }
            card.get("rarity")?.asString?.let { raritySet.add(it) }
            card.get("set")?.asString?.let { setSet.add(it) }
            card.get("type")?.asString?.let { typeSet.add(it) }
        }

        val cardIds = HashMap<String, String>()
        val keys = TreeSet<String>(map.keys)
        for (key in keys) {
            val allIds = map[key]!!

            /*
             * there might be several cards with the same name (pyros is an example)
             * in that case, we sort by card id
             */
            allIds.sort()

            for ((i, id) in allIds.withIndex()) {
                var name = key
                if (i > 0) {
                    name += i
                }
                cardIds.put(name, id)
            }
        }

        generateFile("CardId", cardIds, outputDir)

        generateEnumFile("PlayerClass", playerClassSet, outputDir)
        generateEnumFile("Race", raceSet, outputDir)
        generateEnumFile("Rarity", raritySet, outputDir)
        generateEnumFile("Set", setSet, outputDir)
        generateEnumFile("Type", typeSet, outputDir)
    }

    companion object {
        private fun generateEnumFile(fileName: String, propertySet: Set<String>, outputDir: File) {
            generateFile(fileName, propertySet.map { it to it }.toMap(), outputDir)
        }

        private fun generateFile(fileName: String, properties: Map<String, String>, outputDir: File) {
            val fileBuilder = FileSpec.builder("net.mbonnin.hsmodel", fileName)
            fileBuilder.addComment("Generated by hsmodel")

            val typeBuilder = TypeSpec.objectBuilder(fileName)
            for (property in properties) {
                typeBuilder.addProperty(PropertySpec.builder(property.key, String::class)
                        .initializer("\"" + property.value + "\"")
                        .addModifiers(KModifier.CONST, KModifier.PUBLIC)
                        .mutable(false)
                        .build())
            }
            fileBuilder.addType(typeBuilder.build())

            fileBuilder.build().writeTo(outputDir)
        }
    }
}


